{"ast":null,"code":"var _jsxFileName = \"/home/arm/Desktop/exp/dnd-two/src/Row.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport Column from \"./Column\";\nimport { ROW } from \"./constants\";\nimport DropZone from \"./DropZone\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst style = {};\nconst Row = _ref => {\n  _s();\n  let {\n    data,\n    components,\n    handleDrop,\n    path\n  } = _ref;\n  const handler = useRef(null);\n  const columnWrapper = useRef(null);\n  const columnContainer = useRef(null);\n  const ref = useRef(null);\n  const [isResizable, setIsResizable] = useState(false);\n  const [isShowDropzone, setIsShowDropzone] = useState(true);\n  const [targetedColumn, setTargetedColumn] = useState(null);\n  const [{\n    isDragging\n  }, drag] = useDrag(() => ({\n    item: {\n      id: data.id,\n      children: data.children,\n      type: ROW,\n      path\n    },\n    canDrag: !isResizable,\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  }), []);\n  drag(ref);\n  const opacity = isDragging ? 0 : 1;\n  const renderColumn = (column, currentPath, ref) => {\n    return /*#__PURE__*/_jsxDEV(Column, {\n      innerRef: ref,\n      data: column,\n      components: components,\n      handleDrop: handleDrop,\n      path: currentPath\n    }, column.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  };\n  useEffect(() => {\n    if (isResizable) {\n      document.addEventListener(\"mousemove\", seizer);\n      return () => document.removeEventListener(\"mousemove\", seizer);\n    }\n  }, [isResizable]);\n  const resizingStartHandler = index => {\n    setTargetedColumn(index - 1);\n    setIsResizable(true);\n  };\n  const seizer = e => {\n    console.log(\"moving\");\n    const targetedColumnEl = document.getElementById(`col-${path}-${targetedColumn}`);\n    // Get offset\n    let targetedColumnElOffsetLeft = targetedColumnEl.offsetLeft;\n\n    // Get x-coordinate of pointer relative to columnWrapper\n    let pointerRelativeXPos = e.clientX - targetedColumnElOffsetLeft - 30;\n    let boxAminWidth = 160;\n    console.log(columnContainer.current);\n    targetedColumnEl.style.width = Math.max(boxAminWidth, pointerRelativeXPos) + \"px\";\n    targetedColumnEl.style.flexGrow = 0;\n  };\n  const resizingEndHandler = index => {\n    console.log(\"stop\");\n    setIsResizable(false);\n  };\n  const resizeInterchangeHandler = () => {\n    setIsShowDropzone(true);\n    setIsResizable(false);\n  };\n  console.log(isResizable);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    style: {\n      ...style,\n      opacity\n    },\n    className: \"base draggable row\",\n    children: [data.id, data.children.length == 0 ? /*#__PURE__*/_jsxDEV(DropZone, {\n      data: {\n        path: `${path}-0`,\n        childrenCount: data.children.length\n      },\n      onDrop: handleDrop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: columnWrapper,\n      className: \"columns\",\n      children: [data.children.map((column, index) => {\n        const currentPath = `${path}-${index}`;\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [isShowDropzone || index == 0 ? /*#__PURE__*/_jsxDEV(DropZone, {\n            data: {\n              path: currentPath,\n              childrenCount: data.children.length\n            },\n            onDrop: isResizable ? null : handleDrop,\n            className: \"horizontalDrag\",\n            onMouseOverHandler: () => {\n              if (index != 0) {\n                setIsShowDropzone(false);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 37\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            onMouseDown: () => resizingStartHandler(index),\n            onMouseUp: () => resizingEndHandler(index),\n            onMouseOut: resizeInterchangeHandler,\n            ref: handler,\n            id: `handle-${currentPath}`,\n            className: \"handler\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 37\n          }, this), renderColumn(column, currentPath, columnContainer)]\n        }, column.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 29\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(DropZone, {\n        data: {\n          path: `${path}-${data.children.length}`,\n          childrenCount: data.children.length\n        },\n        onDrop: handleDrop,\n        className: \"horizontalDrag\",\n        isLast: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n_s(Row, \"ur0Lf6cqfweOeeDHgm/nwbWJsRw=\", false, function () {\n  return [useDrag];\n});\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useDrag","Column","ROW","DropZone","style","Row","data","components","handleDrop","path","handler","columnWrapper","columnContainer","ref","isResizable","setIsResizable","isShowDropzone","setIsShowDropzone","targetedColumn","setTargetedColumn","isDragging","drag","item","id","children","type","canDrag","collect","monitor","opacity","renderColumn","column","currentPath","document","addEventListener","seizer","removeEventListener","resizingStartHandler","index","e","console","log","targetedColumnEl","getElementById","targetedColumnElOffsetLeft","offsetLeft","pointerRelativeXPos","clientX","boxAminWidth","current","width","Math","max","flexGrow","resizingEndHandler","resizeInterchangeHandler","length","childrenCount","map"],"sources":["/home/arm/Desktop/exp/dnd-two/src/Row.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport Column from \"./Column\";\nimport { ROW } from \"./constants\";\nimport DropZone from \"./DropZone\";\n\nconst style = {};\nconst Row = ({ data, components, handleDrop, path }) => {\n    const handler = useRef(null);\n    const columnWrapper = useRef(null);\n    const columnContainer = useRef(null);\n    const ref = useRef(null);\n    const [isResizable, setIsResizable] = useState(false);\n    const [isShowDropzone, setIsShowDropzone] = useState(true);\n    const [targetedColumn, setTargetedColumn] = useState(null);\n\n    const [{ isDragging }, drag] = useDrag(\n        () => ({\n            item: {\n                id: data.id,\n                children: data.children,\n            type: ROW,\n                path\n            },\n            canDrag: !isResizable,\n            collect: (monitor) => ({\n                isDragging: monitor.isDragging()\n            })\n        }), []\n    );\n    drag(ref);\n    const opacity = isDragging ? 0 : 1;\n\n    const renderColumn = (column, currentPath, ref) => {\n        return (\n            <Column\n                innerRef={ref}\n                key={column.id}\n                data={column}\n                components={components}\n                handleDrop={handleDrop}\n                path={currentPath}\n            />\n        );\n    };\n    useEffect(() => {\n        if (isResizable) {\n            document.addEventListener(\"mousemove\", seizer);\n            return () => document.removeEventListener(\"mousemove\", seizer);\n        }\n    }, [isResizable]);\n\n    const resizingStartHandler = (index) => {\n        setTargetedColumn(index - 1);\n        setIsResizable(true);\n    };\n\n    const seizer = (e) => {\n        console.log(\"moving\");\n        const targetedColumnEl = document.getElementById(\n            `col-${path}-${targetedColumn}`\n        );\n        // Get offset\n        let targetedColumnElOffsetLeft = targetedColumnEl.offsetLeft;\n\n        // Get x-coordinate of pointer relative to columnWrapper\n        let pointerRelativeXPos = e.clientX - targetedColumnElOffsetLeft - 30;\n        let boxAminWidth = 160;\n        console.log(columnContainer.current);\n        targetedColumnEl.style.width =\n            Math.max(boxAminWidth, pointerRelativeXPos) + \"px\";\n\n        targetedColumnEl.style.flexGrow = 0;\n    };\n\n    const resizingEndHandler = (index) => {\n        console.log(\"stop\");\n        setIsResizable(false);\n    };\n    const resizeInterchangeHandler = () => {\n        setIsShowDropzone(true);\n        setIsResizable(false);\n    };\n\n    console.log(isResizable);\n    return (\n        <div\n            ref={ref}\n            style={{ ...style, opacity }}\n            className=\"base draggable row\"\n        >\n            {data.id}\n            {data.children.length == 0 ? (\n                <DropZone\n                    data={{\n                        path: `${path}-0`,\n                        childrenCount: data.children.length\n                    }}\n                    onDrop={handleDrop}\n                />\n            ) : (\n                <div ref={columnWrapper} className=\"columns\">\n                    {data.children.map((column, index) => {\n                        const currentPath = `${path}-${index}`;\n\n                        return (\n                            <React.Fragment key={column.id}>\n                                {isShowDropzone || index == 0 ? (\n                                    <DropZone\n                                        data={{\n                                            path: currentPath,\n                                            childrenCount: data.children.length\n                                        }}\n                                        onDrop={isResizable ? null : handleDrop}\n                                        className=\"horizontalDrag\"\n                                        onMouseOverHandler={() => {\n                                            if (index != 0) {\n                                                setIsShowDropzone(false);\n                                            }\n                                        }}\n                                    />\n                                ) : (\n                                    <div\n                                        onMouseDown={() =>\n                                            resizingStartHandler(index)\n                                        }\n                                        onMouseUp={() =>\n                                            resizingEndHandler(index)\n                                        }\n                                        onMouseOut={resizeInterchangeHandler}\n                                        ref={handler}\n                                        id={`handle-${currentPath}`}\n                                        className=\"handler\"\n                                    />\n                                )}\n                                {renderColumn(\n                                    column,\n                                    currentPath,\n                                    columnContainer\n                                )}\n                            </React.Fragment>\n                        );\n                    })}\n                    <DropZone\n                        data={{\n                            path: `${path}-${data.children.length}`,\n                            childrenCount: data.children.length\n                        }}\n                        onDrop={handleDrop}\n                        className=\"horizontalDrag\"\n                        isLast\n                    />\n                </div>\n            )}\n        </div>\n    );\n};\nexport default Row;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}