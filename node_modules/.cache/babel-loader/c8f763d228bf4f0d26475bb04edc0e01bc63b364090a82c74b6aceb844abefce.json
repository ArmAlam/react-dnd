{"ast":null,"code":"// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length);\n  var id = '';\n  while (true) {\n    var bytes = random(step);\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step;\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || '';\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id;\n    }\n  }\n};","map":{"version":3,"names":["module","exports","random","alphabet","size","mask","Math","log","length","LN2","step","id","bytes","i"],"sources":["/home/arm/Desktop/exp/dnd-two/node_modules/shortid/node_modules/nanoid/format.browser.js"],"sourcesContent":["// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;;AAEAA,MAAM,CAACC,OAAO,GAAG,UAAUC,MAAM,EAAEC,QAAQ,EAAEC,IAAI,EAAE;EACjD;EACA;EACA;EACA;EACA;EACA,IAAIC,IAAI,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,GAAG,CAACJ,QAAQ,CAACK,MAAM,GAAG,CAAC,CAAC,GAAGF,IAAI,CAACG,GAAG,IAAI,CAAC;EAC9D;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA,IAAIC,IAAI,GAAG,CAAC,EAAE,GAAG,GAAGL,IAAI,GAAGD,IAAI,GAAGD,QAAQ,CAACK,MAAM,CAAC;EAClD,IAAIG,EAAE,GAAG,EAAE;EAEX,OAAO,IAAI,EAAE;IACX,IAAIC,KAAK,GAAGV,MAAM,CAACQ,IAAI,CAAC;IACxB;IACA,IAAIG,CAAC,GAAGH,IAAI;IACZ,OAAOG,CAAC,EAAE,EAAE;MACV;MACA;MACAF,EAAE,IAAIR,QAAQ,CAACS,KAAK,CAACC,CAAC,CAAC,GAAGR,IAAI,CAAC,IAAI,EAAE;MACrC;MACA,IAAIM,EAAE,CAACH,MAAM,KAAK,CAACJ,IAAI,EAAE,OAAOO,EAAE;IACpC;EACF;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}