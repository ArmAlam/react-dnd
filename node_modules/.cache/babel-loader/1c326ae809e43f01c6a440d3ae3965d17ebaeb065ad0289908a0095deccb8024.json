{"ast":null,"code":"'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n  alphabet.seed(seedValue);\n  return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n  clusterWorkerId = workerId;\n  return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n  if (newCharacters !== undefined) {\n    alphabet.characters(newCharacters);\n  }\n  return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;","map":{"version":3,"names":["alphabet","require","build","isValid","clusterWorkerId","seed","seedValue","module","exports","worker","workerId","characters","newCharacters","undefined","shuffled","generate"],"sources":["/home/arm/Desktop/exp/dnd-two/node_modules/shortid/lib/index.js"],"sourcesContent":["'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAY,CAAC;AACpC,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAS,CAAC;AAC9B,IAAIE,OAAO,GAAGF,OAAO,CAAC,YAAY,CAAC;;AAEnC;AACA;AACA;AACA;AACA,IAAIG,eAAe,GAAGH,OAAO,CAAC,0BAA0B,CAAC,IAAI,CAAC;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,IAAI,CAACC,SAAS,EAAE;EACrBN,QAAQ,CAACK,IAAI,CAACC,SAAS,CAAC;EACxB,OAAOC,MAAM,CAACC,OAAO;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAM,CAACC,QAAQ,EAAE;EACtBN,eAAe,GAAGM,QAAQ;EAC1B,OAAOH,MAAM,CAACC,OAAO;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASG,UAAU,CAACC,aAAa,EAAE;EAC/B,IAAIA,aAAa,KAAKC,SAAS,EAAE;IAC7Bb,QAAQ,CAACW,UAAU,CAACC,aAAa,CAAC;EACtC;EAEA,OAAOZ,QAAQ,CAACc,QAAQ,EAAE;AAC9B;;AAEA;AACA;AACA;AACA;AACA,SAASC,QAAQ,GAAG;EAClB,OAAOb,KAAK,CAACE,eAAe,CAAC;AAC/B;;AAEA;AACAG,MAAM,CAACC,OAAO,GAAGO,QAAQ;AACzBR,MAAM,CAACC,OAAO,CAACO,QAAQ,GAAGA,QAAQ;AAClCR,MAAM,CAACC,OAAO,CAACH,IAAI,GAAGA,IAAI;AAC1BE,MAAM,CAACC,OAAO,CAACC,MAAM,GAAGA,MAAM;AAC9BF,MAAM,CAACC,OAAO,CAACG,UAAU,GAAGA,UAAU;AACtCJ,MAAM,CAACC,OAAO,CAACL,OAAO,GAAGA,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}